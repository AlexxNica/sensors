<pre class="metadata">
Title: Generic Sensor API
Status: ED
ED: https://w3c.github.io/sensors/
Shortname: generic-sensor
TR: http://www.w3.org/TR/generic-sensor/
Editor: Tobie Langel 78102, Intel Corporation, tobie@sensors.codespeaks.com
Editor: Rick Waldron, jQuery Foundation
Group: dap
Abstract:
  This specification defines a framework for exposing sensor data
  to the Open Web Platform in a consistent way.
  It does so by defining a blueprint for writing
  specifications of concrete sensors along with an abstract Sensor interface
  that can be extended to accommodate different sensor types.
Version History: https://github.com/w3c/sensors/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/sensors/issues/new">via the w3c/sensors repository on GitHub</a>
Indent: 2
Repository: w3c/sensors
Markup Shorthands: markdown on
Inline Github Issues: true
!Issue Tracking: <a href="https://github.com/w3c/sensors/milestones/Level%201">Level 1 Issues</a>
Boilerplate: omit issues-index, omit conformance
</pre>
<pre class="anchors">
urlPrefix: https://dom.spec.whatwg.org; spec: DOM
  type: interface
    text: EventTarget; url: interface-eventtarget
  type: dfn
    text: dispatch; url: concept-event-dispatch
    text: event; url: concept-event
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: HTML
  type: dfn
    urlPrefix: webappapis.html
      text: incumbent settings object
      text: event handlers
      text: event handler event type
      text: queue a task
      text: event loop
      text: fire a simple event
      text: trusted; url: concept-events-trusted
    urlPrefix: infrastructure.html
      text: in parallel
    urlPrefix: browsers.html
      text: browsing context
      text: top-level browsing context
  type: interface
    urlPrefix: webappapis.html
      text: EventHandler
urlPrefix: http://w3c.github.io/hr-time/; spec: hr-time-2
  type: interface
    text: DOMHighResTimeStamp; url: dom-domhighrestimestamp
  type: dfn
    text: time origin
urlPrefix: https://w3c.github.io/webappsec/specs/powerfulfeatures/; spec: powerful-features
  type: dfn
    text: secure context
urlPrefix: https://heycam.github.io/webidl/; spec: WebIDL
  type: dfn
    text: throw; url: dfn-throw
    text: InvalidStateError
urlPrefix: https://w3c.github.io/permissions/; spec: permissions-api
  type: dfn
    text: permission state;                url: idl-def-PermissionState
    text: permission;                      url: idl-def-Permission
    text: PermissionDescriptor;            url: idl-def-PermissionDescriptor
  type: dfn
    text: associated PermissionDescriptor; url: dfn-associated-permissiondescriptor
    text: retrieving the permission state; url: dfn-retrieve-the-permission-state
</pre>


Introduction {#intro}
=====================

Increasingly, sensor data is used in application development to
enable new use cases such as geolocation,
counting steps or head-tracking.
This is especially true on mobile devices where new sensors are added regularly.

Exposing sensor data to the Web
has so far been both slow-paced and ad-hoc.
Few sensors are already exposed to the Web.
When they are, it is often in ways that limit their possible use cases
(for example by exposing abstractions that are too <a>high-level</a>
and which don't perform well enough).
APIs also vary greatly from one sensor to the next
which increases the cognitive burden of Web application developers
and slows development.

The goal of the Generic Sensor API is to
promote consistency across sensor APIs,
enable advanced use cases thanks to performant <a>low-level</a> APIs,
and increase the pace at which new sensors can be exposed to the Web
by simplifying the specification and implementation processes.

Scope {#scope}
=====

<em>This section is non-normative</em>.

The scope of this specification is currently limited
to specifying primitives
which enable expose data from local sensors.

Exposing remote sensors
or sensors found on personal area networks
is out of scope.
As work in these areas mature,
it is possible that common, lower-level primitives be found,
in which case this specification will be updated accordingly.
This should have little to no effects on implementations, however.

This specification also does not currently expose a
sensor discovery API.
This is because the limited number of sensors currently available to User Agents
does not warrant such an API.
Using feature detection, such as described in [[#feature-detection]],
is good enough for now.
A subsequent version of this specification might specify such an API,
and the current API has been designed with this in mind.

Background {#background}
==========

<em>This section is non-normative</em>.

The Generic Sensor API is designed to make the most common use cases straightforward
while still enabling more complex use cases.

Most devices deployed today do not carry more than one
<a>sensor</a> of each <a lt="sensor types">type</a>.
This shouldn't come as a surprise since use cases for more than
a <a>sensor</a> of a given <a lt="sensor types">type</a> are rare
and generally limited to specific <a>sensor types</a> such as
proximity sensors.

The API therefore makes it easy to interact with
the device's default (and often unique) <a>sensor</a>
for each <a lt="sensor types">type</a>
simply by instantiating the corresponding <a interface>Sensor</a> subclass.

Indeed, without specific information identifying a particular <a>sensor</a>
of a given <a lt="sensor type">type</a>,
the default <a>sensor</a> is chosen.

<div class="example">
    Listening to geolocation changes:

    <pre highlight="js">
    let sensor = new GeolocationSensor({ accuracy: "high" });

    sensor.onchange = function(event) {
        var coords = [event.reading.latitude, event.reading.longitude];
        updateMap(null, coords, reading.data.accuracy);
    };

    sensor.onerror = function(error) {
        updateMap(error);
    };
    </pre>
</div>

Note: extension to this specification may choose not to define a default sensor
when doing so wouldn't make sense.
For example, it might be difficult to agree on an obvious default <a>sensor</a> for
proximity <a>sensors</a>.

In cases where
multiple <a>sensors</a> of the same <a lt="sensor type">type</a>
may coexist on the same device,
specification extension will have to
define ways to uniquely identify each one.

<div class="example">
    For example checking the pressure of the left rear tire: 

    <pre highlight="js">
    let sensor = new DirectTirePressureSensor({ position: "rear", side: "left" });
    sensor.onchange = event => console.log(event.reading.pressure);
    </pre>
</div>

A note on Feature Detection of Hardware Features {#feature-detection}
================================================

<em>This section is non-normative.</em>

Feature detection is an established Web development best practice.
Resources on the topic are plentiful on and offline and
the purpose of this section is not to discuss it further,
but rather to put it in the context of detecting hardware-dependent features.

Consider the below feature detection examples:

<div class="example">
    <pre highlight="js">
        if (typeof Gyroscope === "function") {
            // run in circles...
        }
        
        if ("ProximitySensor" in window) {
            // watch out!
        }
        
        if (window.AmbientLightSensor) {
            // go dark...
        }
        
        // etc.
    </pre>
</div>

All of these tell you something about the presence
and possible characteristics of an API.
They do not tell you anything, however, about whether
that API is actually connected to a real hardware sensor,
whether that sensor works,
if its still connected,
or even whether the user is going to allow you to access it.
Note you can check the latter using the Permissions API [[permissions]].

In an ideal world, information about the underlying status
would be available upfront.
The problem with this is twofold.
First, getting this information out of the hardware is costly,
in both performance and battery time,
and would sit in the critical path.
Secondly, the status of the underlying hardware can evolve over time.
The user can revoke permission, the connection to the sensor be severed,
the operating system may decide to limit sensor usage below a certain battery threshold,
etc.

Therefore, an effective strategy is to combine feature detection,
which checks whether an API for the sought-after sensor actually exists,
and defensive programming which includes:

1.  checking for error thrown when instantiating a <a interface>Sensor</a> object,
2.  listening to errors emitted by it,
3.  handling all of the above graciously so that the user's experience is
    enhanced by the possible usage of a sensor, not degraded by its
    absence.

<div class="example">
    <pre highlight="js">
        try { // No need to feature detect thanks to try..catch block.
            let sensor = new GeolocationSensor({});
            sensor.start();
            sensor.onerror = error => gracefullyDegrade(error);
            sensor.onchange = data => updatePosition(data.coords);
        } catch(error) {
            gracefullyDegrade(error);
        }
    </pre>
</div>

Concepts {#concepts}
========

A <a>sensor</a> measures different physical quantities
and provide corresponding <dfn>raw sensor readings</dfn>
which are a source of information about the user and their environment.

Known, <em>predictable</em> discrepancies between <a>raw sensor readings</a>
and the corresponding physical quantities being measured
are corrected through <dfn>calibration</dfn>.

Known but <em>unpredictable</em> discrepancies need to be addressed dynamically
through a process called <a>sensor fusion</a>.

<a lt=calibration>Calibrated</a> <a>raw sensor readings</a> are referred to as <dfn>sensor readings</dfn>,
whether or not they have undergone <a>sensor fusion</a>.

Different <a>sensor types</a> measure different physical quantities
such as temperature, air pressure, heart-rate, or luminosity.

For the purpose of this specification we distinguish between
<a>high-level</a> and <a>low-level</a> <a>sensor types</a>.

<a>Sensor types</a> which are characterized by their implementation
are referred to as <dfn>low-level</dfn> sensors.
For example a Gyroscope is a <a>low-level</a> <a>sensor types</a>.

<a>Sensors</a> named after their <a lt="sensor readings">readings</a>,
regardless of the implementation,
are said to be <dfn>high-level</dfn> sensors.
For instance, geolocation sensors provide information about the user's location,
but the precise means by which this data is obtained
is purposefully left opaque
(it could come from a GPS chip, network cell triangulation,
wifi networks, etc. or any combination of the above)
and depends on various, implementation-specific heuristics.
<a>High-level</a> sensors are generally the fruits of
applying algorithms to <a>low-level</a> sensors--
for example, a pedometer can be built using only the output of a gyroscope--
or of <a>sensor fusion</a>.

That said, the distinction between
<a>high-level</a> and <a>low-level</a> <a>sensor types</a>
is somewhat arbitrary and the line between the two is often blurred.
For instance, a barometer, which measures air pressure,
would be considered <a>low-level</a> for most common purposes,
even though it is the product of the <a>sensor fusion</a> of
resistive piezo-electric pressure and temperature sensors.
Exposing the sensors that compose it would serve no practical purpose;
who cares about the temperature of a piezo-electric sensor?
A pressure-altimeter would probably fall in the same category,
while a nondescript altimeter--
which could get its data from either a barometer or a GPS signal--
would clearly be categorized as a <a>high-level</a> <a>sensor type</a>.

Because the distinction is somewhat blurry,
extensions to this specification (see [[#extensibility]])
are encouraged to provide domain-specific definitions of
<a>high-level</a> and <a>low-level</a> sensors
for the given <a>sensor types</a> they are targeting.

<a>Sensor readings</a> from different sensor <a>types</a> can be combined together 
through a process called <dfn>sensor fusion</dfn>.
This process provides <a lt="high-level">higher-level</a> or
more accurate data (often at the cost of increased latency).
For example, the <a lt="sensor readings">readings</a> of a three-axis magnetometer
needs to be combined with the <a lt="sensor readings">readings</a> of an accelerometer
to provide a correct bearing.

<dfn>Smart sensors</dfn> and <dfn>sensor hubs</dfn>
have built-in compute resources which allow them
to carry out <a>calibration</a> and <a>sensor fusion</a> at the hardware level,
freeing up CPU resources
and lowering battery consumption
in the process.

But <a>sensor fusion</a> can also be carried out in software.
This is particularly useful when performance requirements can only be met
by relying on application-specific data.
For example, head tracking for virtual or augmented reality applications,
requires extremely low latency
to avoid causing motion sickness.
That low-latency is best provided
by using the raw output of a gyroscope,
and waiting for quick rotational movements of the head
to compensate for drift.

Note: <a>sensors</a> created through <a>sensor fusion</a> are sometimes
called virtual or synthetic sensors.
However, the specification doesn't make any practical differences between them,
preferring instead to differentiate <a>sensors</a> as to whether they describe
the kind of <a lt="sensor readings">readings</a> produced--these are <a>high-level</a> sensors--
or how the sensor is implemented (<a>low-level</a> sensors).

<a>Sensors</a> have different <dfn>reporting modes</dfn>.
When <a>sensor readings</a> are reported at regular intervals,
at an ajustable <dfn>frequency</dfn>,
the <a>reporting mode</a> is said to be <dfn>periodic</dfn>.
When it is only reported upon measurable change,
the <a>sensor</a> is said to be in <dfn>auto</dfn> <a>reporting mode</a>.

<a>Auto</a> <a>reporting mode</a> can give the user agent
more latitude to carry out power- or CPU-saving strategies
and should generally be favored.
<a>Periodic</a> <a>reporting mode</a>, on the other hand,
allows a much more fine-grained approach
and is essential for use cases with, for example,
low latency requirements.

Note: <a>reporting mode</a> is distinct from,
but related to,
<a>sensor readings</a> acquisition.
If <a>sensors</a> are polled at regular interval,
as is generally the case,
<a>reporting mode</a> can be either <a>periodic</a> or <a>auto</a>.
However, when the underlying implementation itself only provides <a>sensor readings</a>
when it measures change,
perhaps because is is relying on <a>smart sensors</a> or a <a>sensor hubs</a>,
the <a>reporting mode</a> cannot be <a>periodic</a>,
as that would require data inference.

Model {#model}
=====

<h3 dfn>Sensor Type</h3>

A <a>sensor type</a> has one or many associated <a>sensors</a>.

A <a>sensor type</a> has an associated subclass of the <a interface>Sensor</a> interface.

A <a>sensor type</a> may have a default <a>sensor</a>.

A <a>sensor type</a> has more than one <a>sensor</a>,
it must have a set of associated <dfn>identifying parameters</dfn>
to select the right <a>sensor</a> to a associate to each new <a instance>Sensor</a> objects.

<h3 dfn>Sensor</h3>

A <a>sensor</a> has an associated set of <dfn>activated Sensor objects</dfn>. This set is initially empty.

A <a>sensor</a> has an associated <dfn>current reading</dfn>.

A <a>sensor</a> has an associated set of <dfn>supported reporting modes</dfn>,
which cannot be empty and must be picked from the following:
<a>auto</a> and <a>periodic</a>.

A <a>sensor</a> has an associated <dfn>current working mode</dfn> which is initially null.

A <a>sensor</a> has an associated abstract operation to
<dfn lt="retrieve the sensor permission">retrieve its permission</dfn> which
takes a <a interface>Sensor</a> object as input and
returns a <a>permission</a> and, eventually, its <a>associated PermissionDescriptor</a>.

API {#api}
===

## The Sensor Interface

A <dfn interface>Sensor</dfn> object has an associated <a>sensor</a>.

A <a interface>Sensor</a> object has an associated <dfn>state</dfn>,
which is one of <a enum-value>"idle"</a>, <a enum-value>"activating"</a>, <a enum-value>"active"</a>, and <a enum-value>"errored"</a>. It is initially <a enum-value>"idle"</a>.

<!--
A <a interface>Sensor</a> object observes the changes in its associated <a>sensor</a>
at regular intervals and reports those values by firing DOM events.
-->

<a>Frequency</a> is measured in hertz (Hz).

TODO: define the following concepts

- <dfn>read steps</dfn>

<pre class="idl">
interface Sensor : EventTarget {
  readonly attribute SensorState state;
  readonly attribute SensorReading? reading;
  void start();
  void stop();
  attribute EventHandler onchange;
  attribute EventHandler onstatechange;
  attribute EventHandler onerror;
};

dictionary SensorOptions {
  double? frequency;
};

enum SensorState {
  "idle",
  "activating",
  "active",
  "errored"
};
</pre>

### Sensor.state

The <a attribute for="Sensor">state</a> attribute represents a <a>Sensor</a> object's <a>state</a>.

### Sensor.reading

When a Sensor's state is <a enum-value>"active"</a>,
its reading attribute must always point to the latest <a>SensorReading</a>
whatever the <a>frequency</a> so that
the reading attribute of two instances of the same Sensor interface
associated with the same <a>sensor</a>
hold the same <a>SensorReading</a> during a single <a>event loop</a> turn.

### Sensor.start
<div algorithm="to start a sensor">
The <dfn>start()</dfn> method must run these steps or their <a>equivalent</a>:

    1.  If |sensorInstance|'s <a>state</a> is neither <a enum-value>"idle"</a> nor <a enum-value>"errored"</a>,
        1.  throw an "<a>InvalidStateError</a>" exception and abort these steps.
    1.  Invoke the <a>update state</a> algorithm passing |sensorInstance| and <a enum-value>"activating"</a> as the arguments.
    1.  Run these sub-steps <a>in parallel</a>:
        1.  Invoke <a>Register a Sensor</a> passing it |sensorInstance| as argument.
    1.  return `undefined`.

</div>
### Sensor.stop
<div algorithm="to stop a sensor">
The <dfn>stop()</dfn> method must run these steps or their <a>equivalent</a>:

    1.  If |sensorInstance|'s <a>state</a> is either <a enum-value>"idle"</a> or <a enum-value>"errored"</a>, then
        1.  throw an "<a>InvalidStateError</a>" exception and abort these steps.
    1.  Set |sensorInstance|’s <a attribute for="Sensor">reading</a> to `null`.
    1.  Invoke the <a>update state</a> algorithm passing |sensorInstance| and <a enum-value>"idle"</a> as the arguments.
    1.  Run these sub-steps <a>in parallel</a>:
        1.  Invoke <a>Unregister a Sensor</a> passing it |sensorInstance| as argument.
    1.  return `undefined`.

</div>


### Sensor.onerror

### Sensor.onchange

### Sensor.onstatechange

### Event handlers

The following are the <a>event handlers</a>
(and their corresponding <a>event handler event types</a>)
that must be supported as attributes by the objects implementing the <a>Sensor</a> interface:

<table class="simple">
  <thead>
    <tr>
      <th>event handler</th>
      <th>event handler event type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong><code>onchange</code></strong></td>
      <td><code>change</code></td>
    </tr>
    <tr>
      <td><strong><code>onstatechange</code></strong></td>
      <td><code>statechange</code></td>
    </tr>
    <tr>
      <td><strong><code>onerror</code></strong></td>
      <td><code>error</code></td>
    </tr>
  </tbody>
</table>

The SensorReading Interface
---------------------------

A <dfn>SensorReading</dfn> represents the state of a <a>sensor</a> at a given point in time.

<pre class="idl">

[Constructor()]
interface SensorReading {
  readonly attribute DOMHighResTimeStamp timeStamp;
};
</pre>

### SensorReading.timeStamp

Returns a timestamp of the time
at which the <a>read steps</a> was carried out
expressed in milliseconds that passed since the <a>time origin</a>.

The SensorReadingEvent Interface
--------------------------------

<pre class="idl">
[Constructor(DOMString type, SensorReadingEventInit eventInitDict)]
interface SensorReadingEvent : Event {
  readonly attribute SensorReading reading;
};

dictionary SensorReadingEventInit : EventInit {
  SensorReading reading;
};
</pre>

The SensorErrorEvent Interface
------------------------------

<pre class="idl">
[Constructor(DOMString type, SensorErrorEventInit errorEventInitDict)]
interface SensorErrorEvent : Event {
  readonly attribute Error error;
};

dictionary SensorErrorEventInit : EventInit {
  Error error;
};
</pre>

Abstract Operations {#abstract-operations}
===================

<h3 algorithm dfn>Construct Sensor Object</h3>

    : input
    :: |options|, a <a dictionary>SensorOptions</a> object.
    : output
    :: |sensorInstance|, a <a interface>Sensor</a> object.
    
    1.  If the <a>incumbent settings object</a> is not a <a>secure context</a>, then:
        1.  <a>throw</a> a SecurityError.
    1.  If the <a>browsing context</a> is not a <a>top-level browsing context</a>, then:
        1.  <a>throw</a> a SecurityError.
    1.  Otherwise, if <a>identifying parameters</a> in |options| are set, then:
        1.  If these <a>identifying parameters</a> allow a unique <a>sensor</a> to be identified, then:
            1.  let |sensorInstance| be a new <a interface>Sensor</a> object.
            1.  associate |sensorInstance| with that <a>sensor</a>
        1. Otherwise, <a>throw</a> a TypeError.
    1.  Otherwise, if a default sensor exists for this <a>sensor type</a>:
        1.  let |sensorInstance| be a new <a interface>Sensor</a> object.
        1.  associate that <a>sensor</a> with it.
    1.  Otherwise, <a>throw</a> a TypeError.
    1.  Set |sensorInstance|'s <a for="Sensor" attribute>reading</a> attribute to `null`.
    1.  Set |sensorInstance|'s <a>state</a> to <a enum-value>"idle"</a>.
    1.  return |sensorInstance|.

<h3 algorithm dfn>Register a Sensor</h3>

    : input
    :: |sensorInstance|, a <a>Sensor</a> object.
    : output
    :: None
    
    1. Add |sensorInstance| to its associated <a>sensor</a>'s set of <a>activated Sensor objects</a>.

<h3 algorithm dfn>Unregister a Sensor</h3>

    : input
    :: |sensorInstance|, a <a>Sensor</a> object.
    : output
    :: None
    
    1. Remove |sensorInstance| from its associated <a>sensor</a>'s set of <a>activated Sensor objects</a>.

<h3 algorithm dfn>Find Current Reporting Mode of a Sensor</h3>
    
    : input
    :: |sensor|, a <a>sensor</a>.
    : output
    :: |mode|, a <a>reporting mode</a>.
    
    1. let |mode| be <a>auto</a>.
    1.  For each |sensorInstance| in |sensor|'s set of <a>activated Sensor objects</a>:
        1. if |sensorInstance|'s <a>frequency</a> is not `null`,
            1. set |mode| to <a>periodic</a>
    1. return |mode|.


<h3 algorithm dfn>Find the polling frequency of a Sensor</h3>
    
    : input
    :: |sensor|, a <a>sensor</a>.
    : output
    :: |frequency|, a <a>frequency</a>.
    
    1. let |frequency| be `null`.
    1.  For each |sensorInstance| in |sensor|'s set of <a>activated Sensor objects</a>:
        1. let |f| be |sensorInstance|'s <a>frequency</a>.
        1. if |f| is not `null` and |f| is greater than |frequency|,
            1. set |frequency| to |f|.
    1. return |frequency|.


<h3 algorithm dfn>Update State</h3>

    : input
    :: |sensorInstance|, a <a interface>Sensor</a> object.
    :: |state|, a <a interface>Sensor</a> object's <a>state</a>.
    : output
    :: None
    
    1.  Set |sensorInstance|’s <a attribute>state</a> to |state|.
    1.  <a>Queue a task</a> to <a>fire a simple event</a> named `statechange` at |sensorInstance|.

<h3 algorithm dfn>Update Reading</h3>

    : input
    :: |sensorInstance|, a <a interface>Sensor</a> object.
    :: |reading|, a <a interface>SensorReading</a> object.
    : output
    :: None
    
    1.  Set |sensorInstance|’s <a attribute for="Sensor">reading</a> to |reading|.
    1.  If |sensorInstance|'s <a attribute>state</a> is <a enum-value>"activating"</a>:
        1.  Invoke the <a>update state</a> algorithm passing |sensorInstance|
            and <a enum-value>"active"</a> as the arguments.
    1.  Create an <a>event</a> |e| that uses the <a interface>SensorReadingEvent</a> interface,
        with the event type `reading`, which does not bubble, is not cancelable, is <a>trusted</a>, and has no default action.
    1.  Let the <a attribute for=SensorReadingEvent>reading</a> attribute of |e| be initialized to |reading|.
    1.  <a>Queue a task</a> to <a>dispatch</a> |e| at |sensorInstance|.
    
<h3 algorithm dfn>Handle Errors</h3>

    : input
    :: |sensorInstance|, a <a interface>Sensor</a> object.
    :: |error|, an Error object.
    : output
    :: None
    
    1.  Set |sensorInstance|’s <a attribute for="Sensor">reading</a> to `null`.
    1.  Invoke the <a>update state</a> algorithm passing |sensorInstance| and <a enum-value>"errored"</a> as the arguments.
    1.  Create an <a>event</a> |e| that uses the <a interface>SensorErrorEvent</a> interface,
        with the event type `error`, which does not bubble, is not cancelable, is <a>trusted</a>, and has no default action.
    1.  Let the <a attribute for=SensorErrorEvent>error</a> attribute of |e| be initialized to |error|.
    1.  <a>Queue a task</a> to <a>dispatch</a> |e| at |sensorInstance|.


<h3 algorithm dfn>Request Sensor Access</h3>

    : input
    :: |sensorInstance|, a <a interface>Sensor</a> object.
    : output
    :: a <a>permission state</a>.
    
    1.  Let |s| be the <a>sensor</a> associated with |sensorInstance|.
    1.  let |permission| be the result of invoking the abstract operation <a>retrieve the sensor permission</a> associated with |s|,
        passing it |sensorInstance| as argument.
    1.  Let |state| be the result of <a>retrieving the permission state</a> for |permission|.
    1.  If |state| is "granted",
        1. register the sensor.
    1.  If |state| is "denied",
        1. more here.
Security and privacy considerations
===================================

Privacy risks can arise when <a>sensors</a> are used
with each other,
in combination with other functionality,
or when used over time,
specifically with the risk of correlation of data
and user identification through fingerprinting.
Web application developers using these JavaScript APIs should
consider how this information might be correlated with other information
and the privacy risks that might be created.
The potential risks of collection of such data over a longer period of time
should also be considered.

Variations in <a>sensor readings</a>
as well as event firing rates
offer the possibility of fingerprinting to identify users.
Browser implementations may reduce the risk by
limiting event rates available to web application developers.

Note: do we really want this mitigation strategy?

If the same JavaScript code using the API can be
used simultaneously in different window contexts on the same device
it may be possible for that code to correlate the user across those two contexts,
creating unanticipated tracking mechanisms.

Browser implementations should consider providing the user
an indication of when the <a>sensor</a> is used
and allowing the user to disable it.

Web application developers that use <a>sensors</a> should
perform a privacy assessment of their application
taking all aspects of their application into consideration.

Browsing Context {#browsing-context}
----------------

<a>Sensor readings</a> must only be available in the
<a>top-level browsing context</a> to avoid the privacy risk of
sharing the information defined in this specification
(and specifications extending it)
with contexts unfamiliar to the user.
For example, a mobile device will only fire the event on
the active tab, and not on the background tabs or within iframes.

Secure Context {#secure-context}
--------------

<a>Sensor readings</a> are explicitly flagged by the
Secure Contexts specification [[powerful-features]]
as a high-value target for network attackers.
As such, <a>sensor readings</a> must only be available
within a <a>secure context</a>.

Obtaining Explicit User Permission {#permissioning}
----------------------------------

Issue(w3c/sensors#20):

Extensibility {#extensibility}
=============

<em>This section is non-normative.</em>

Its purpose is to describe
how this specification can be extended to specify APIs for
different <a>sensor types</a>.

Extension specifications are encouraged to focus on a single <a>sensor type</a>,
exposing both <a lt="high-level">high</a> and <a lt="low-level">low</a> level
as appropriate.

Naming
------

<a interface>Sensor</a> interfaces for <a>low-level</a> sensors should be
named after their associated <a>sensor</a>.
So for example, the interface associated with a gyroscope
should be simply named `Gyroscope`.
<a interface>Sensor</a> interfaces for <a>high-level</a> sensors should be
named by combining the physical quantity the <a>sensor</a> measures
with the "Sensor" suffix.
For example, a <a>sensor</a> measuring
the distance at which an object is from it
may see its associated interface called `ProximitySensor`.

Attributes of the <a interface>SensorReading</a> subclass that
hold <a>sensor readings</a> values
should be named after the full name of these values.
For example, the `TemperatureSensorReading` interface should hold
the <a>sensor reading</a>'s value in
a `temperature` attribute (and not a `value` or `temp` attribute).
A good starting point for naming are the
Quantities, Units, Dimensions and Data Types Ontologies [[QUDT]].

Unit {#unit}
----

Extension specification must specify the unit of <a>sensor readings</a>.

As per the Technical Architecure Group's (TAG) API Design Principles [[API-DESIGN-PRINCIPLES]],
all time measurement should be in milliseconds.
All other units should be specified using,
in order of preference,
and with the exception of temperature (for which Celsius should be favored over Kelvin),
the International System of Units (SI),
SI derived units, and
Non-SI units accepted for use with the SI,
as described in the SI Brochure [[SI]].

Exposing High-Level vs. Low-Level Sensors {#high-vs-low-level}
-----------------------------------------

So far, specifications exposing sensors to the Web platform
have focused on <a>high-level</a> sensors APIs. [[geolocation-API]] [[orientation-event]]

This was a reasonable approach for a number of reasons.
Indeed, <a>high-level</a> sensors:

-   convey developer intent clearly,
-   do not require intimate knowledge of how the underlying hardware sensors functions,
-   are easy to use,
-   may enable the User Agent to make significant
    performance and battery life improvements,
-   help avoid certain privacy and security issues by
    decreasing the amount and type of information exposed.

However, an increasing number of use cases
such as virtual and augmented reality
require <a>low-level</a> access to sensors,
most notably for performance reasons.

Providing <a>low-level</a> access
enables Web application developers to leverage domain-specific constraints
and design more performant systems.

Following the precepts of the Extensible Web Manifesto [[EXTENNNNSIBLE]],
extension specifications should focus primarily on
exposing <a>low-level</a> sensor APIs, but should also expose
<a>high-level</a> APIs when they are clear benefits in doing so.

When is Enabling Multiple Sensors of the Same Type Not the Right Choice? {#multiple-sensors}
------------------------------------------------------------------------

TODO: provide guidance on when to:

- allow multiple sensors of the same type to be instantiated,
- create different interfaces that inherit from <a interface>Sensor</a>,
- add constructor parameters to tweak sensors settings (e.g. setting required accuracy).

Defining a default
------------------

Extension specifications should define a default <a>sensor</a>
for each <a>sensor type</a> they define.
Generally, devices are equipped with a single <a>sensor</a>
of each <a lt="sensor types">type</a>,
so defining a default <a>sensor</a>
should be easy.
For <a>sensor types</a> where multiple <a>sensors</a> are common,
extension specifications may choose not to define a default sensor.

Extending the Permission API {#permission-api}
----------------------------

Provide guidance on how to extend the Permission API [[permissions]]
for each <a>sensor types</a>.

Issue(w3c/sensors#22):

Immutability requirements
-------------------------

Attributes of the <a interface>SensorReading</a> subclass that
hold <a>sensor readings</a> values must be readonly.

Example WebIDL
--------------

Here's example WebIDL for a possible extension of this specification
for proximity <a>sensors</a>.

<pre class=example highlight=WEBidl >
    [Constructor(optional ProximitySensorOptions proximitySensorOptions)]
    interface ProximitySensor : Sensor {
      readonly attribute ProximitySensorReading? reading;
    };

    interface ProximitySensorReading : SensorReading {
        readonly attribute unrestricted double distance;
    };

    dictionary ProximitySensorOptions : SensorOptions {
        double? min = -Infinity;
        double? max = Infinity;
        ProximitySensorPosition? position;
        ProximitySensorDirection? direction;
    };
    
    enum ProximitySensorPosition {
        "top-left",
        "top",
        "top-right",
        "middle-left",
        "middle",
        "middle-right",
        "bottom-left",
        "bottom",
        "bottom-right"
    };

    enum ProximitySensorDirection {
        "front",
        "rear",
        "left",
        "right",
        "top",
        "bottom"
    };
</pre>

Acknowledgements
================

First and foremost, I would like to thank Anssi Kostiainen
for his continuous and dedicates support and input throughout
the development of this specification.

Special thanks to Rick Waldron for
driving the discussion around a generic sensor API design for the Web,
sketching the original API on which this is based,
providing implementation feedback from his work on Johnny-Five,
and continuous input during the development of this specification.

Special thanks to Boris Smus, Tim Volodine, and Rich Tibbett
for their initial work on exposing sensors to the Web with consistency.

Thanks to Anne van Kesteren
for his tireless help both in person and through IRC.

Thanks to Domenic Denicola and Jake Archibald for their help.

Thanks also to Frederick Hirsch and Dominique Hazaël-Massieux (via the HTML5Apps project)
for both their administrative help and technical input.

The following people have greatly contributed to this specification through extensive discussions on GitHub:
Anssi Kostiainen,
Boris Smus,
chaals,
Claes Nilsson,
Dave Raggett,
David Mark Clements,
Domenic Denicola,
Dominique Hazaël-Massieux (via the HTML5Apps project),
Francesco Iovine,
Frederick Hirsch,
gmandyam,
Jafar Husain,
Johannes Hund,
Kris Kowal,
Marcos Caceres,
Marijn Kruisselbrink,
Mark Foltz,
Mats Wichmann,
Matthew Podwysocki,
pablochacin,
Remy Sharp,
Rich Tibbett,
Rick Waldron,
Rijubrata Bhaumik,
robman,
Sean T. McBeth,
smaug----,
Tab Atkins Jr.,
Virginie Galindo,
zenparsing,
and Zoltan Kis.

We'd also like to thank
Anssi Kostiainen,
Dominique Hazaël-Massieux,
Erik Wilde,
and
Michael[tm] Smith
for their editorial input.

<h2 id="conformance" class="no-ref no-num">Conformance</h2>

<h3 id="conventions" class="no-ref no-num">Document conventions</h3>

    <p>Conformance requirements are expressed with a combination of
    descriptive assertions and RFC 2119 terminology. The key words "MUST",
    "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
    "RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
    document are to be interpreted as described in RFC 2119.
    However, for readability, these words do not appear in all uppercase
    letters in this specification.

    <p>All of the text of this specification is normative except sections
    explicitly marked as non-normative, examples, and notes. [[!RFC2119]]</p>

    <p>Examples in this specification are introduced with the words "for example"
    or are set apart from the normative text with <code>class="example"</code>,
    like this:

    <div class="example">
        <p>This is an example of an informative example.</p>
    </div>

    <p>Because this document doesn't itself define APIs for specific <a>sensor types</a>--
    that is the role of extensions to this specification--
    all examples are inevitably (wishful) fabrications.
    Although all of the <a>sensors</a> used a examples
    would be great candidates for building atop the Generic Sensor API,
    their inclusion in this document does not imply that the relevant Working Groups
    are planning to do so.

    <p>Informative notes begin with the word "Note" and are set apart from the
    normative text with <code>class="note"</code>, like this:

    <p class="note">Note, this is an informative note.</p>

<h3 id="conformant-algorithms" class="no-ref no-num">Conformant Algorithms</h3>

    <p>Requirements phrased in the imperative as part of algorithms (such as
    "strip any leading space characters" or "return false and abort these
    steps") are to be interpreted with the meaning of the key word ("must",
    "should", "may", etc) used in introducing the algorithm.</p>

    <p>Conformance requirements phrased as algorithms or specific steps can be
    implemented in any manner, so long as the end result is <dfn>equivalent</dfn>. In
    particular, the algorithms defined in this specification are intended to
    be easy to understand and are not intended to be performant. Implementers
    are encouraged to optimize.</p>

<h3 id="conformance-classes" class="no-ref no-num">Conformance Classes</h3>

    <p>A <dfn>conformant user agent</dfn> must implement all the requirements
    listed in this specification that are applicable to user agents.</p>
