<pre class="metadata">
Title: Generic Sensor API
Status: ED
Level: 1
ED: https://w3c.github.io/sensors/
Shortname: sensors
TR: http://www.w3.org/TR/sensors/
Editor: Tobie Langel 78102, Intel Corporation, tobie@sensors.codespeaks.com
Editor: Rick Waldron, jQuery Foundation
Group: dap
Abstract:
  This specification defines a framework for exposing sensor data
  to the Open Web Platform in a consistent way.
  It does so by defining a blueprint for writing
  specifications of concrete sensors along with an abstract Sensor interface
  that can be extended to accommodate different sensor types.
Version History: https://github.com/w3c/sensors/commits/gh-pages/index.bs
!Bug Reports: <a href="https://www.github.com/w3c/sensors/issues/new">via the w3c/sensors repository on GitHub</a>
Indent: 2
Markup Shorthands: markdown on
Inline Github Issues: true
Boilerplate: omit issues-index, omit conformance
</pre>
<pre class="anchors">
urlPrefix: https://dom.spec.whatwg.org; spec: DOM
  type: dfn
    text: fire an event; url: concept-event-fire
  type: interface
    text: EventTarget; url: interface-eventtarget
urlPrefix: http://www.w3.org/TR/html5/; spec: HTML5
  type: dfn
    urlPrefix: webappapis.html
      text: incumbent settings object
      text: event handlers
      text: event handler event type
      text: queue a task
      text: event loop
    urlPrefix: infrastructure.html
      text: in parallel
  type: interface
    urlPrefix: webappapis.html
      text: EventHandler
urlPrefix: http://w3c.github.io/hr-time/; spec: hr-time-2
  type: interface
    text: DOMHighResTimeStamp; url: dom-domhighrestimestamp
  type: dfn
    text: time origin
urlPrefix: https://w3c.github.io/webappsec/specs/powerfulfeatures/; spec: powerful-features
  type: dfn
    text: secure context
urlPrefix: https://heycam.github.io/webidl/; spec: WebIDL
  type: dfn
    text: throw
</pre>


Introduction {#intro}
=====================

Increasingly, sensor data is used in application development to
enable new use cases such a geolocation,
counting steps or head-tracking.
This is especially true on mobile devices where new sensors are added regularly.
It is also increasinly common in networked objects
which are part of the Internet of Things.

Exposing sensor data to the Web
has so far been both slow-paced and ad-hoc.
Few sensors are already exposed to the Web.
When they are, it is often in ways that limit their possible use cases
(for example by exposing abstractions that are too <a>high-level</a>
and which don't perform well enough).
APIs also vary greatlty from one sensor to the next
which increases the cognitive burden of Web application developers
and slows development.

The goal of the Generic Sensor API is to
promote consistency across sensor APIs,
enable advanced use cases thanks to performant <a>low-level</a> APIs,
and increase the pace at which new sensors can be exposed to the Web
by simplifying the specification and implementation processes.

Terminology
===========

A <dfn>sensor</dfn> measure different physical quantities
and provide corresponding <dfn>output data</dfn>
which is a source of information about the user and their environment.

Known, <em>predictable</em> discrepancies between <a>sensor</a> <a>output data</a>
and the corresponding physical quantities being measured
are corrected through <dfn>calibration</dfn>,

Known but <em>unpredictable</em> discrepancies need to be addressed dynamically
through a process called <a>sensor fusion</a>.

Different <dfn>sensor types</dfn> measure different physical quantities
such as temperature, air pressure, heart-rate, or luminosity.

For the purpose of this specification we distinguish between
<a>high-level</a> and <a>low-level</a> sensor types.

<a>Sensor types</a> which are characterized by their implementation
are refered to as <dfn>low-level</dfn> sensors.
For example a Gyroscope is a <a>low-level</a> sensor type.

<a>Sensors</a> named after their <a>output data</a>,
regarless of the implementation,
are said to be <dfn>high-level</dfn> sensors.
For instance, geolocation sensors provide information about the user's location,
but the precise means by which this data is obtained
is purposefully left opaque
(it could come from a GPS chip, network cell triangulation,
wifi networks, etc. or any combination of the above)
and depends on various, implementation-specific heuristics.
<a>High-level</a> sensors are generally the fruits of
applying algorithms to <a>low-level</a> sensors--
for example, a podometer can be built using only the output of a gyroscope--
or of <a>sensor fusion</a>.

That said, the distinction between
<a>high-level</a> and <a>low-level</a> sensor types
is somewhat arbitrary and the line between the two is often blurred.
For instance, a barometer, which measures air pressure,
would be considered <a>low-level</a> for most common purposes.
As, even though it is the product of the <a>sensor fusion</a> of
resistive piezo-electric pressure and temperature sensors,
exposing the sensors that compose it would serve no practical purpose
(who cares about the temperature of a piezo-electric sensor?).
A pressure-altimeter would probably fall in the same category,
while a non-descript altimeter--
which could get its data from either a barometer or a GPS signal--
would clearly be categorized as a <a>high-level</a> sensor type.

Because the distinction is somewhat blurry,
extensions to this specification (see [[#extensibility]])
are encouraged to provide domain-specific definitions of
<a>high-level</a> and <a>low-level</a> sensors
for the given <a>sensor types</a> they are targeting.

The <a>output data</a> of sensors can be combined with
the output of other sensors
through a process called <dfn>sensor fusion</dfn>.
This process provides <a lt="high-level">higher-level</a> or
more accurate data (often at the cost of increased latency).
For example, the <a lt="output data">output</a> of a three-axis magnetometer
needs to be combined with the <a lt="output data">output</a> of an accelerometer
to provide a correct bearing.
<a>Sensor fusion</a> can be carried out at either
the hardware or software level.

Note: <a>sensors</a> created through <a>sensor fusion</a> are sometimes
called virtual or synthetic sensors.
However, the specification doesn't make any practical differences between them,
preferring instead to differentiate sensors as to whether they describe
the kind of <a>output data</a> produced--these are <a>high-level</a> sensors--
or how the sensor is implemented (<a>low-level</a> sensors).

TODO: add a section about reading from a <a>sensor</a> and
how this is exposed as an asynchonous operation.

An note on Feature Detection of Hardware Features {#feature-detection}
=================================================

<em>This section is non-normative.</em>

Feature detection is an established Web development best practice.
Resources on the topic are plentiful on and offline and
the purpose of this section is not to discuss it further,
but rather to put it in the context of detecting hardware-dependent features.

Consider the below feature detection examples:

<div class="example">
    <pre example highlight="js">
        if (typeof Gyroscope === "function") {
            // run in circles...
        }
        
        if ("PromimitySensor" in window) {
            // watch out!
        }
        
        if (window.AmbientLightSensor) {
            // go dark...
        }
        
        // etc.
    </pre>
</div>

All of these tell you something about the presence
and possible characteristics of an API.
They do not tell you anything, however, about whether
that API is actually connected to a real hardware sensor,
whether that sensor works,
if its still connected,
or even whether the user is going to allow you to access it.
Note you can check the latter using the Permissions API [[permissions]].

In an ideal world, information about the underlying status
would be available upfront.
The problem with this is twofold.
First, getting this information out of the hardware is costly,
in both performance and battery time,
and would sit in the critical path.
Secondly, the status of the underlying hardware can elvolve over time.
The user can revoke permission, the connection to the sensor be severed,
the operating system may decide to limit sensor usage below a certain battery threshold,
etc.

Therefore, an effective strategy is to combine feature detection,
which checks whether an API for the sought-after sensor actually exists,
and defensive programming which includes:

1.  checking for error thrown when instantiating a <a interface>Sensor</a> object,
2.  listening to errors emitted by it,
3.  setting an appropriate timeout for your particular usecase,
4.  handling all of the above graciously so that the user's experienced is
    enhanced by the possible usage of a sensor, not degraded by its
    absence.

<div class="example">
    <pre example highlight="js">
        if (typeof GeolocationSensor === "function") {
            try {
                let sensor = new GeolocationSensor({
                    timeout: 3 * 1000 // 3 seconds
                });
                sensor.onerror = error => gracefullyDegrade(error);
                sensor.onchange = data => updatePosition(data.coords);
            } catch(error) {
                gracefullyDegrade(error);
            }
        } else {
            gracefullyDegrade();
        }
    </pre>
</div>

Model
=====

<em>This section is non-normative</em>.

The Generic Sensor API is designed to make the most common use cases straightforward
while still enabling more complex use cases.

Most devices deployed today do not carry more than one
<a>sensor</a> of each <a lt="sensor types">type</a>.
This shouldn't come as a surprise since use cases for more than
a <a>sensor</a> of a given <a lt="sensor types">type</a> are rare
and generally limited to specific <a>sensor types</a> such as
proximity sensors.

The API therefore makes it easy to interact with
the device's default (and often unique) <a>sensor</a>
for each <a lt="sensor types">type</a>
simply by instantiating the corresponding <a instance>Sensor</a> subclass.

Indeed, without specific information identifying a particular <a>sensor</a>
of a given <a lt="sensor type">type</a>,
the default <a>sensor</a> is chosen.

<div class="example">
    Listening to geolocation changes:

    <pre example highlight="js">
    let sensor = new GeolocationSensor({ accuracy: "high" });

    sensor.onchange = function(event) {
        var coords = [event.data.latitude, event.data.longitude];
        updateMap(null, coords, event.data.accuracy);
    };

    sensor.onerror = function(error) {
        updateMap(error);
    };
    </pre>
</div>

Similarly, getting a single <a>output data</a> sample
should be a simple process, and it is:

<div class="example">
    Geolocating the user:

    <pre example highlight="js">
    GeolocationSensor.requestData({ accuracy: "high" })
        .then(reading => { displayCoords(reading.coords); })
        .catch(err => console.log(err));
    </pre>
</div>

Note: extension to this specification may choose not to define a default sensor
when doing so wouldn't make sense.
For example, it might be difficult to agree on an obvious default <a>sensor</a> for
proximity <a>sensors</a>.

In cases where
multiple <a>sensors</a> of the same <a lt="sensor type">type</a>
may coexist on the same device,
specification extension will have to
define ways to uniquely identify each one.

<div class="example">
    For example checking the pressure of the left rear tire: 

    <pre example highlight="js">
    DirectTirePressureSensor.requestData({ position: "rear", side: "left" })
        .then(reading => { display(reading.pressure); })
        .catch(err => console.log(err));
    </pre>
</div>

### Enumerating Sensors

<a>Sensor</a> discoverability becomes particularly important
as the number of <a>sensor</a> grows.
Web application developers need to find out what kind of
sensor is on a given device and what their capabilities are.

<strong>This feature is at risk and might be moved to
a subsequent version of this specification.</strong>

API
===

## The Sensor Interface

A <dfn interface>Sensor</dfn> object has an associated <a>sensor</a>.

A <a interface>Sensor</a> object observes the changes in its associated <a>sensor</a>
at regular intervals and reports those values by firing DOM events.

<dfn>frequency</dfn> is measured in hertz (Hz).

TODO: define the following concepts

- <dfn>batch mode</dfn>
- <dfn>permission</dfn>
- <dfn>read steps</dfn>
- <dfn>identifying parameters</dfn>

<pre class="idl">
[Constructor(optional SensorOptions sensorOptions), Exposed=(Window,Worker)]
interface Sensor : EventTarget {
  attribute double frequency;
  attribute boolean batch;
  readonly attribute SensorInfo info;
  attribute TresholdCallback? treshold; 
  attribute double timeout; 
  attribute boolean wakeup; 
  readonly attribute SensorReading? value;
  readonly attribute SensorReading[]? values;
  attribute EventHandler onerror;
  attribute EventHandler onchange;
  // would that cover all cases?
  attribute EventHandler oncalibration;
  // needed?
  attribute EventHandler onconnect;
  attribute EventHandler ondisconnect;
};

dictionary SensorOptions {
  DOMString? sensorId;
  double? frequency;
  boolean? batch = false;
  TresholdCallback? treshold;
  double? timeout;
};

callback TresholdCallback = boolean (SensorReading currentValue, SensorReading newValue);
</pre>

### Sensor Constructor

The <a>Sensor()</a> constructor must run these steps:

1.  If the <a>incumbent settings object</a> is not a <a>secure context</a>, then:
    1.  <a>throw</a> a SecurityError.
1.  If sensorOptions.sensorId is specified, then:
    1.  If there is a <a>sensor</a> identified by sensorOptions.sensorId, then
        1.  let <var>sensor</var> be a new <a interface>Sensor</a> object.
        1.  associate <var>sensor</var> with that <a>sensor</a>
    1. Otherwise, <a>throw</a> a TypeError.
1.  Otherwise, if <a>identifying parameters</a> in sensorOptions are set, then:
    1.  If these <a>identifying parameters</a> allow a unique <a>sensor</a> to be identified, then:
        1.  let <var>sensor</var> be a new <a interface>Sensor</a> object.
        1.  associate <var>sensor</var> with that <a>sensor</a>
    1. Otherwise, <a>throw</a> a TypeError.
1.  Otherwise, if a default sensor exists for this <a>sensor type</a>:
    1.  let <var>sensor</var> be a new <a interface>Sensor</a> object.
    1.  associate that <a>sensor</a> with it.
1.  Otherwise, <a>throw</a> a TypeError.
1.  Set <var>sensor</var>'s reading attribute to `null`.
1.  return <var>sensor</var>.
1.  Run these substeps <a>in parallel</a>:
    1.  If <a>permission</a> is not granted,
        <a>queue a task</a> to <a>fire an event</a> named error on <var>sensor</var>,
        and terminate these substeps.
    1.  If cached <a>SensorReadings</a> are available,
        1.   let <var>latest_reading</var> be the most recent of those <a>SensorReadings</a>.
        2.   set the value of <var>sensor</var>'s reading attribute to <var>latest_reading</var>.
    1.  run the <a>read steps</a> for <var>sensor</var>.

### Sensor.frequency

The <a>frequency</a> at which the <a>read steps</a> are run.

Issue(w3c/sensors#4):

Issue(w3c/sensors#23):

### Sensor.batch

`true` if <a>batch mode</a> was requested, false otherwise.

### Sensor.info

Returns the related <a>SensorInfo</a> object.

### Sensor.treshold

Issue(w3c/sensors#25):

### Sensor.timeout

Issue(w3c/sensors#44):

### Sensor.wakeup

Issue(w3c/sensors#15):

### Sensor.value

The value attribute of must always point to the latest <a>SensorReading</a>
whatever the <a>frequency</a> so that
the value attribute of two instances of the same Sensor interface
associated with the same <a>sensor</a>
hold the same <a>SensorReading</a> during a single <a>event loop</a> turn.

### Sensor.values

Issue(w3c/sensors#13):

### Sensor.onerror

### Sensor.onchange

### Sensor.oncalibration

### Sensor.onconnect

### Sensor.ondisconnect

### Event handlers

The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) that MUST be supported as attributes by the objects implementing the <a>Sensor</a> interface:

<table class="simple">
  <thead>
    <tr>
      <th>event handler</th>
      <th>event handler event type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong><code>onchange</code></strong></td>
      <td><code>change</code></td>
    </tr>
    <tr>
      <td><strong><code>onerror</code></strong></td>
      <td><code>error</code></td>
    </tr>
    <tr>
      <td><strong><code>oncalibration</code></strong></td>
      <td><code>calibration</code></td>
    </tr>
    <tr>
      <td><strong><code>onconnect</code></strong></td>
      <td><code>connect</code></td>
    </tr>
    <tr>
      <td><strong><code>ondisconnect</code></strong></td>
      <td><code>disconnect</code></td>
    </tr>
  </tbody>
</table>

### The <dfn>SensorReading</dfn> Interface

Represents the values of a <a>sensor</a> at a given point in time.

<pre class="idl">
interface SensorReading {
  readonly attribute DOMHighResTimeStamp timeStamp;
  readonly attribute SensorInfo info;
};
</pre>

### SensorReading.timeStamp

Returns a timestamp of the time at which the data was <a href=#>read from the sensor</a> expressed in milliseconds that passed since the <a>time origin</a>.

### SensorReading.info

Returns the sensor object the reading is taken from.

## The `Sensors` Interface

The <a>Sensors</a> interface represents a container for a list of <a>SensorInfo</a> objects. It is exposed on Window and Workers as the `Window.sensors` and `WorkerGlobalScope.sensors` attribute respectively.

<pre class="idl">
[Constructor, Exposed=(Window,Worker)]
interface Sensors {
  Promise&lt;sequence&lt;SensorInfo&gt;&gt; matchAll(optional MatchAllOptions options);
};

partial interface Window {
  [SameObject] readonly attribute Sensors sensors;
};

partial interface WorkerGlobalScope {
  [SameObject] readonly attribute Sensors sensors;
};

dictionary MatchAllOptions {
  DOMString type;
};
</pre>

### Sensors.matchAll

<!-- here link to read data from -->

<!--Must take the following steps.
    1. let <var>p</var> be a <a>List</a>.
    1. let <var>devices</var> be a <a>List</a>. -->

Issue(w3c/sensors#26):

Returns a promise which resolves to an array of <a>SensorInfo</a> objects representing all available local(?) sensors.

Issue(w3c/sensors#28):

Issue(w3c/sensors#7):

<pre class="example highlight">
sensors.matchAll({ type: "proximity", position: "rear" }).then(function(sensors) {
    let sensor_info = sensors[0];
    if (!sensor_info) return;
    let sensor = new ProximitySensor(sensor_info.id, { /* ... */ });
    sensor.onchange = dostuff;
});
</pre>

## The <dfn>SensorInfo</dfn> Interface

The `SensorInfo` interface is a lightweight object that represents an actual physical sensor. Concrete sensor implementation will need to subclass it.

If no `id` is given, the Constructor uses the identifier of the default sensor of that type. This is to the cater to the common case of having a single sensor of a given type on a device.

<pre class="example highlight javascript">

let sensor = new GeolocationSensor();
sensor.isDefault; // returns true;

</pre>

<pre class="idl">
[Constructor(optional DOMString id, optional SensorInit sensorInitDic), Exposed=(Window,Worker)]
interface SensorInfo {
    readonly attribute DOMString id;
    readonly attribute boolean isDefault;
};

dictionary SensorInit {
  boolean isDefault;
};
</pre>

### <dfn>SensorInfo.id</dfn>

Returns the id of the sensor. This is an opaque DOMString.

### <dfn>SensorInfo.isDefault</dfn>

Returns true if the sensor is the default sensor of that type on the device, false otherwise.


Low level Sensor API
--------------------

Issue(w3c/sensors#24):

Security and privacy considerations
===================================

TODO: gather general security and privacy risks common to all sensors.

Secure Context {#secure-context}
--------------

Sensor data is explicitely flagged by the
Secure Contexts specification [[powerful-features]]
as a high-value target for network attackers.
As such, sensor data should only be available within a <a>secure context</a>.

Obtaining Explicit User Permission {#permissioning}
----------------------------------

Issue(w3c/sensors#20):

Extensibility
=============

<em>This section is non-normative.</em>

Its purpose is to describe
how this specification can be extended to speficy APIs for
different <a>sensor types</a>.

Extension specifications are encouraged to focus on a single <a>sensor type</a>,
exposing both <a lt="high-level">high</a> and <a lt="low-level">low</a> level
as appropriate.

Naming
------

<a interface>Sensor</a> interfaces for <a>low-level</a> sensors should be
named after their associated <a>sensor</a>.
So for example, the interface associated with a gyroscope
should be simply named `Gyroscope`.
<a interface>Sensor</a> interfaces for <a>high-level</a> sensors should be
named by combining the physical quantity the <a>sensor</a> measures
with the "Sensor" suffix.
For example, a <a>sensor</a> measuring
the distance at which an object is from it
may see its associated interface called `ProximitySensor`.

Attributes of the <a interface>SensorReading</a> subclass that
hold <a>output data</a>
should be named after the full name of this <a>output data</a>.
For example, the `TemperatureSensorReading` interface should hold
the value of the <a>sensor</a>'s <a>output data</a> in
a `temperature` attribute (and not a `value` or `temp` attribute).

Exposing High-Level vs. Low-Level Sensors {#high-vs-low-level}
-----------------------------------------

So far, specifications exposing sensors to the Web platform
have focused on <a>high-level</a> sensors APIs. [[geolocation-API]] [[orientation-event]]

This was a reaosnable approach for a number of reasons.
Indeed, <a>high-level</a> sensors:

-   convey developer intent clearly,
-   do not require intimate knowledge of how the underlying hardware sensors functions,
-   are easy to use,
-   may enable the User Agent to make significant
    performance and battery life improvements,
-   help avoid certain privacy and security issues by
    decreasing the amount and type of information exposed.

However, an increasing number of use cases
such as virtual and augmented reality [[sensor-use-cases]]
require <a>low-level</a> access to sensors,
most notably for performance reasons.

Providing <a>low-level</a> access
enables Web application developers to leverage domain-specific constraints
and design more performant systems.

Following the precepts of the Extensible Web Manifesto [[EXTENNNNSIBLE]],
extension specifications should focus primarily on
exposing <a>low-level</a> sensor APIs, but should also expose
<a>high-level</a> APIs when they are clear benefits in doing so.

When is Enabling Multiple Sensors of the Same Type Not the Right Choice? {#multiple-sensors}
------------------------------------------------------------------------

TODO: provide guidance on when to:

- allow multiple sensors of the same type to be instantiated,
- create different interfaces that inherit from <a interface>Sensor</a>,
- add constructor parameters to tweak sensors settings (e.g. setting required accuracy).

Defining a default
------------------

TODO: provide guidance on how and when to set a default <a>sensor</a>.

Calibration {#calibration}
-----------

<a>Output data</a> emitted by <a interface>Sensor</a> objects
should always be <a lt="calibration">calibrated</a>.



Issue(w3c/sensors#22):

Acknowledgements
================

The following people have greatly contributed to this specification through extensive discussions on GitHub:
Anssi Kostiainen,
Boris Smus,
Claes Nilsson,
Dave Raggett,
davidmarkclements,
Domenic Denicola,
Dominique Hazael-Massieux,
fhirsch,
Francesco Iovine,
gmandyam,
Jafar Husain,
Johannes Hund,
Kris Kowal,
Marcos Caceres,
Mats Wichmann,
Matthew Podwysocki,
pablochacin,
Remy Sharp,
Rich Tibbett,
Rick Waldron,
Rijubrata Bhaumik,
robman,
Sean T. McBeth,
smaug----,
and
zenparsing.

We'd also like to thank
Anssi Kostiainen,Erik Wilde,
and
Michael[tm] Smith
for their editorial input.

<h2 id="conformance" class="no-ref no-num">Conformance</h2>

<h3 id="conventions" class="no-ref no-num">Document conventions</h3>

    <p>Conformance requirements are expressed with a combination of
    descriptive assertions and RFC 2119 terminology. The key words "MUST",
    "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
    "RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
    document are to be interpreted as described in RFC 2119.
    However, for readability, these words do not appear in all uppercase
    letters in this specification.

    <p>All of the text of this specification is normative except sections
    explicitly marked as non-normative, examples, and notes. [[!RFC2119]]</p>

    <p>Examples in this specification are introduced with the words "for example"
    or are set apart from the normative text with <code>class="example"</code>,
    like this:

    <div class="example">
        <p>This is an example of an informative example.</p>
    </div>

    <p>Because this document doesn't itself define APIs for specific <a>sensor types</a>--
    that is the role of extensions to this specification--
    all examples are inevitably (wishful) fabrications.
    Although all of the <a>sensors</a> used a examples
    would be great candidates for building atop the Generic Sensor API,
    their inclusion in this document does not imply that the relevant Working Groups
    are planning to do so.

    <p>Informative notes begin with the word "Note" and are set apart from the
    normative text with <code>class="note"</code>, like this:

    <p class="note">Note, this is an informative note.</p>

<h3 id="conformant-algorithms" class="no-ref no-num">Conformant Algorithms</h3>

    <p>Requirements phrased in the imperative as part of algorithms (such as
    "strip any leading space characters" or "return false and abort these
    steps") are to be interpreted with the meaning of the key word ("must",
    "should", "may", etc) used in introducing the algorithm.</p>

    <p>Conformance requirements phrased as algorithms or specific steps can be
    implemented in any manner, so long as the end result is equivalent. In
    particular, the algorithms defined in this specification are intended to
    be easy to understand and are not intended to be performant. Implementers
    are encouraged to optimize.</p>

<h3 id="conformance-classes" class="no-ref no-num">Conformance Classes</h3>

    <p>A <dfn>conformant user agent</dfn> must implement all the requirements
    listed in this specification that are applicable to user agents.</p>
